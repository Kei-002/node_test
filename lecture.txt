app.js
const express = require('express')
// import express from 'express' es6
const app = express()

app.get('/', (req, res) => {
    res.send('hello world')
})

app.get('api/courses', (req, res) => {
    res.send([1,2,4,])
})

app.listen(3000, () => console.log('listening on port 3000...'))

npm i -g nodemon

environment variables
npm i dotenv

.env
PORT = 5000

app.js
require('dotenv').config()

const app = express()


app.get('/', (req, res) => {
    res.send('hello world')
});

app.get('/api/courses', (req, res) => {
    res.send([1,2,5]);
});

// 
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`listening on port ${port}...`))


route params
app.get('/api/customer/:id', (req, res) => {
    res.send(req.params.id)
    // res.status(200).send(req.query.name)
})

http get request

const customers = [
    { id: 1, name: 'john'},
    { id: 2, name: 'mike'},
    { id: 3, name: 'bron'},
    
]
app.get('/api/customer/:id', (req, res) => {
    // res.send(req.params.id)
    // res.status(200).send(req.query.name)
    // const customer = customers.find(c => c.id === parseInt(req.params.id))
    const customer = customers.find(c => { 
        console.log(c)
        return c.id === parseInt(req.params.id) 
    })
    if (!customer) res.status(404).send('customer not found')
    res.send(customer)
})

post request
app.post('/api/customers',(req, res)=> {
    const customer = {
        id: customers.length + 1,
        name: req.body.name
    }
    customers.push(customer)
    res.send(customer)
})

app.use(express.json())

send json
{
	"name": "kobe"
}

npm i joi

const schema = Joi.object( {
    name: Joi.string().min(3).required()
})
app.post('/api/customers',(req, res)=> {
    const result = schema.validate(req.body)
    console.log(result)
    if (result.error) {
        // res.status(400).send(result.error)
        res.status(400).send(result.error.details[0].message)
        return;
    }
    const customer = {
        id: customers.length + 1,
        name: req.body.name
    }
    customers.push(customer)
    res.send(customer)
})

function validateCustomer(customer) {
    const schema = Joi.object( {
        name: Joi.string().min(3).required()
    })
    return schema.validate(customer)
}

app.put('/api/customer/:id', (req, res) => {
    const customer = customers.find(c => c.id === parseInt(req.params.id))
    if (!customer) res.status(404).send('Customer not found')

    const result = validateCustomer(req.body)
    if (result.error) {
        res.status(400).send(result.error.details[0].message)
        return
    }

    customer.name = req.body.name
    res.send(customer)
})

object destructure

const { error } = validateCustomer(req.body)
if (error) {
            res.status(400).send(error.details[0].message)
            return
        }
delete customer
app.delete('api/customer/:id', (req, res) => {
    const customer = customers.find(c => c.id === parseInt(req.params.id))
    if (!customer) return res.status(404).send('Customer not found')

    const index = customers.indexOf(course)
    customers.splice(index, 1)
    res.send(customer)
})

npm i mysql
var con = mysql.createConnection({
    host: process.env.HOST,
    user: process.env.USER,
    password: process.env.PASSWORD,
    database: process.env.DATABASE
});

.env
PORT=5000
HOST=localhost
USER= root 
PASSWORD=    
DATABASE=db_sales

app.get('/api/items', (req, res) => {
    let sql = `SELECT * FROM item`;
    con.query(sql, (error, results, fields) => {
        if (error) {
          return console.error(error.message);
        }
        
        console.log(results);
        return res.status(200).json(results);
      });
    
    
});